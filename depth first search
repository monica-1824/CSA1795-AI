class Graph:
    def __init__(self, num_vertices):
        self.num_vertices = num_vertices
        self.adj_matrix = [[-1] * num_vertices for _ in range(num_vertices)]
        
    def add_edge(self, v1, v2, weight=1):
        self.adj_matrix[v1][v2] = weight
        
    def remove_edge(self, v1, v2):
        self.adj_matrix[v1][v2] = -1
        
    def __dfs_helper(self, temp, v, visited):
        temp.append(v)
        visited[v] = True
        
        for i in range(self.num_vertices):
            if self.adj_matrix[v][i] > 0 and not visited[i]:
                temp = self.__dfs_helper(temp, i, visited)
        return temp
    
    def dfs(self, v):
        visited = [False for _ in range(self.num_vertices)]
        return self.__dfs_helper([], v, visited)

g = Graph(4)
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 2)
g.add_edge(2, 0)
g.add_edge(2, 3)
g.add_edge(3, 3)

print(g.dfs(2))
